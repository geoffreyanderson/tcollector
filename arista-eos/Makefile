# This file is part of tcollector.
# Copyright (C) 2011  StumbleUpon, Inc.
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or (at your
# option) any later version.  This program is distributed in the hope that it
# will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser
# General Public License for more details.  You should have received a copy
# of the GNU Lesser General Public License along with this program.  If not,
# see <http://www.gnu.org/licenses/>.

PACKAGE_VERSION := 1.0.0
RPM_REVISION := 1
# Where do we install our files.
tcollectordir := /usr/local/tcollector

# Various commands we need.
MKDIR_P := mkdir -p
CP_P := cp -p
# In some environment this command can be called `gsha1sum' or `digest'.
SHA1SUM := sha1sum
ZIP := zip -9
PYTHON_VERSION := 2.6
PYTHON := python$(PYTHON_VERSION)

# Our "source tree" is in the parent directory, always.
VPATH := ..

# What files to put in the RPM.
FILES := \
	collectors/0/dfstat.py	\
	collectors/0/ifstat.py	\
	collectors/0/iostat.py	\
	collectors/0/netstat.py	\
	collectors/0/procnettcp.py	\
	collectors/0/procstats.py	\
	tcollector.py	\

git_version := \
  `git rev-list --pretty=format:%h HEAD --max-count=1 | sed 1d || echo unknown`
git_fullsha1 := \
  `git rev-list --pretty=format:%H HEAD --max-count=1 | sed 1d || echo unknown`
# What / where do we build.
DESTDIR := destdir
RPM_TARGET := noarch
BASENAME := tcollector-$(PACKAGE_VERSION)-$(RPM_REVISION)
RPM := $(BASENAME).$(RPM_TARGET).rpm
SWIX := $(BASENAME).swix

all: $(SWIX)

$(SWIX): $(RPM) manifest.txt
	$(ZIP) $@ $^

manifest.txt: $(RPM) Makefile
	set -e; { \
          echo 'format: 1'; \
          echo 'primaryRpm: $(RPM)'; \
          echo -n '$(RPM)-sha1: '; \
          set `$(SHA1SUM) "$(RPM)"`; \
          echo $$1; \
        } >$@-t
	mv $@-t $@

# TODO(tsuna): Find whether we can get rpmbuild to not create the rpm under a
# subdirectory.  This is annoying.
$(RPM): .dist-stamp real.spec
	rpmbuild --target=$(RPM_TARGET) --buildroot=`pwd`/$(DESTDIR) -bb real.spec
	mv $(RPM_TARGET)/$(RPM) .
	rmdir $(RPM_TARGET)

.dist-stamp: $(FILES) Makefile
	rm -rf $(DESTDIR)
	$(MKDIR_P) "$(DESTDIR)"
	@: >filelist; \
        for file in $(FILES); do \
          d=`dirname "$$file"`;  \
          if test ! -d "$(DESTDIR)/$(tcollectordir)/$$d"; then \
            echo "%dir \"$(tcollectordir)/$$d\"" >>filelist; \
            echo $(MKDIR_P) "'$(DESTDIR)/$(tcollectordir)/$$d'"; \
            $(MKDIR_P) "$(DESTDIR)/$(tcollectordir)/$$d" || exit $$?; \
          fi; \
          echo "\"$(tcollectordir)/$$file\"" >>filelist; \
          case $$file in \
            (*.py) echo "\"$(tcollectordir)/$${file}c\"" >>filelist; \
                   echo "\"$(tcollectordir)/$${file}o\"" >>filelist;; \
          esac; \
          echo $(CP_P) "$(VPATH)/$$file" "'$(DESTDIR)/$(tcollectordir)/$$file'"; \
          $(CP_P) "$(VPATH)/$$file" "$(DESTDIR)/$(tcollectordir)/$$file" || exit $$?; \
        done
	$(PYTHON) -m compileall -q "$(DESTDIR)"
	$(PYTHON) -O -m compileall -q "$(DESTDIR)"
	@touch $@

real.spec: .dist-stamp tcollector.spec ChangeLog $(VPATH)/README Makefile
	set -e; { \
          echo "# File generated by Makefile, do not edit"; \
	  sed tcollector.spec\
            -e 's/@PACKAGE_VERSION@/$(PACKAGE_VERSION)/' \
            -e 's/@PYTHON_VERSION@/$(PYTHON_VERSION)/' \
            -e "s/@GIT_SHORTSHA1@/$(git_version)/" \
            -e "s/@GIT_FULLSHA1@/$(git_fullsha1)/" \
            -e 's/@RPM_REVISION@/$(RPM_REVISION)/'; \
          echo %description; \
          cat $(VPATH)/README; \
          echo %files; \
          cat filelist; \
          echo %changelog; \
          cat ChangeLog; \
        } >$@-t
	mv $@-t $@

clean:
	@for file in $(FILES) $(FILES:.py=.pyc) $(FILES:.py=.pyo); do \
          echo rm -f "'$(DESTDIR)/$(tcollectordir)/$$file'"; \
          rm -f "$(DESTDIR)/$(tcollectordir)/$$file" || exit $$?; \
        done
	@test -d "$(DESTDIR)" || exit 0; \
        find "$(DESTDIR)" -depth -type d \
        | while read dir; do \
          echo rmdir "'$$dir'"; \
          rmdir "$$dir" || exit $$?; \
        done
	rm -f real.spec filelist manifest.txt $(RPM)
	@rm -f .dist-stamp

distclean: clean
	rm -f $(SWIX)

.PHONY: all clean distclean
